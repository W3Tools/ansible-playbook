- name: Create user supervisord
  user:
    name: supervisord
    shell: /usr/sbin/nologin
    system: true
    create_home: yes
    home: /var/lib/supervisord

- name: Create temporary directory {{ tmp_dir }}
  file:
    path: "{{ tmp_dir }}"
    state: directory

- name: Create Directory {{ tools_dir }}
  file:
    path: "{{ tools_dir }}"
    state: directory

- name: Create Directory {{ config_dir }}
  file:
    path: "{{ config_dir }}"
    state: directory

- name: Create Directory {{ logs_dir }}
  file:
    path: "{{ logs_dir }}"
    force: true
    recurse: no
    state: directory
    owner: supervisord
    group: supervisord
    mode: "0755"

- name: Download supervisord_{{ supervisord_version }}_Linux_64-bit.tar.gz
  get_url:
    url: "https://github.com/ochinchina/supervisord/releases/download/v{{ supervisord_version }}/supervisord_{{ supervisord_version }}_Linux_64-bit.tar.gz"
    dest: "{{ tmp_dir }}/supervisord_{{ supervisord_version }}_Linux_64-bit.tar.gz"
    checksum: "sha256:{{ supervisord_tar_gz_sha256 }}"

- name: Untar supervisord
  unarchive:
    src: "{{ tmp_dir }}/supervisord_{{ supervisord_version }}_Linux_64-bit.tar.gz"
    dest: "{{ tmp_dir }}"
    remote_src: true
    owner: "root"
    group: "root"

- name: Copy supervisord to {{ tools_dir }}
  copy:
    remote_src: true
    src: "{{ tmp_dir }}/supervisord_{{ supervisord_version }}_Linux_64-bit/supervisord"
    dest: "{{ tools_dir }}/supervisord"
    owner: root
    group: root
    mode: 0555

- name: Add supervisorctl
  copy:
    dest: "{{ tools_dir }}/supervisorctl"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      {{ tools_dir }}/supervisord ctl $@
    mode: 0755

- name: Soft Links supervisorctl to /usr/local/bin
  file:
    src: "{{ tools_dir }}/supervisorctl"
    dest: "/usr/local/bin/supervisorctl"
    state: link

- name: Create Config file {{ config_dir }}/supervisord.conf
  file:
    path: "{{ config_dir }}/supervisord.conf"
    state: touch

- name: Set acl for supervisord
  acl:
    entry: u:supervisord:rwX
    path: "{{ app_bin_dir }}"
    recursive: true
    state: present

- name: Set default acl for supervisord
  acl:
    default: true
    entry: d:u:supervisord:rwX
    path: "{{ app_bin_dir }}"
    recursive: true
    state: present

- name: Update config file
  blockinfile:
    dest: "{{ config_dir }}/supervisord.conf"
    state: present
    block: |
      [unix_http_server]
      file=/tmp/supervisord.sock

      [inet_http_server]
      port=127.0.0.1:9001

      [supervisord]
      logfile={{ logs_dir }}/supervisord.log
      logfile_maxbytes=500MB
      logfile_backups=10
      loglevel=warning
      pidfile=/tmp/supervisord.pid
      identifier=supervisor
      minfds=65535

      [program:demo]
      command=/bin/cat
      user=supervisord # Startup user must be supervisord
      environment=PATH="/usr/local/bin:/usr/local/node/bin:/usr/local/go/bin:%(ENV_PATH)s"

- name: Configure systemd service for supervisord
  copy:
    dest: "/etc/systemd/system/supervisord.service"
    owner: root
    group: root
    content: |
      [Unit]
      Description=Supervisor daemon
      After=network.target
      Requires=network.target

      StartLimitIntervalSec=0
      # systemd version > 230
      StartLimitInterval=0
      StartLimitBurst=10

      [Service]
      Type=simple
      PIDFile=/tmp/supervisord.pid
      WorkingDirectory=/var/lib/supervisord
      ExecStartPre=-/usr/bin/rm -f /run/supervisord.pid
      ExecStartPre=-/usr/bin/rm -f /tmp/supervisord.sock
      ExecStart={{ tools_dir }}/supervisord -c {{ config_dir }}/supervisord.conf
      ExecReload={{ tools_dir }}/supervisord ctl -c {{ config_dir }}/supervisord.conf reload
      ExecStop={{ tools_dir }}/supervisord ctl -c {{ config_dir }}/supervisord.conf shutdown
      Restart=always
      RestartSec=10s
      User=supervisord
      Group=supervisord
      KillMode=process
      MemoryMax={{ (ansible_memtotal_mb * 0.85) | int }}M
      MemoryLimit={{ (ansible_memtotal_mb * 0.85) | int }}M
      LimitNOFILE=65535
      LimitNPROC=65535
      AmbientCapabilities=CAP_NET_BIND_SERVICE

      [Install]
      WantedBy=multi-user.target

- name: systemd daemon-reload
  systemd:
    daemon_reload: yes

- name: Startup supervisord
  systemd:
    name: supervisord.service
    state: restarted
    enabled: yes
